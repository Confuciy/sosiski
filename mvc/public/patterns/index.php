<?php
$patterns_info = [
    'types_names' => [
        'Creational' => 'Порождающие',
        'Structural' => 'Структурные',
        'Behavioral' => 'Управленческие'
    ],
    'types' => [
        'Creational' => [
            ['name' => 'Simple Factory', 'name_ru' => 'Простая фабрика', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Подумайте, вы строите дом, и вам нужны двери. Это был бы беспорядок, если каждый раз, когда вам понадобится дверь, вы надеваете свою столярную одежду и начинаете делать дверь в своем доме. Вместо этого вы получаете ее с завода.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Простая фабрика просто создает экземпляр для клиента, не выставляя клиенту никакой логики инстанцирования.
                <br /><br />
                <b>Википедия говорит</b>
                <br />В объектно-ориентированном программировании (ООП), фабрика является объектом для создания других объектов - формально фабрика - это функция или метод, которые возвращают объекты изменяющегося прототипа или класса из некоторого вызова метода, который считается «новым».
                <br /><br />
                <b>Программный пример</b>
                <br />Прежде всего, у нас есть дверной интерфейс и реализация',
                'short_descr' => 'Простая фабрика просто создает экземпляр для клиента, не выставляя клиенту никакой логики инстанцирования.'],
            ['name' => 'Factory Method', 'name_ru' => 'Фабричный метод', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Рассмотрим случай с менеджером по найму. Невозможно, чтобы один человек взял интервью у каждой из позиций. Основываясь на открытии вакансии, она должна решить и делегировать шаги собеседования различным людям.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Он предоставляет способ делегирования логики экземпляра классам-потомкам.
                <br /><br />
                <b>Википедия говорит</b>
                <br />В программировании на основе классов шаблон фабричного метода является шаблоном создания, который использует фабричные методы для решения проблемы создания объектов без указания точного класса объекта, который будет создан. Это делается путем создания объектов путем вызова фабричного метода, либо указанного в интерфейсе и реализованного дочерними классами, либо реализованного в базовом классе и необязательно переопределенного производными классами, а не вызывающего конструктор.
                <br /><br />
                <b>Программный пример</b>
                <br />Рассмотрим пример выше. Прежде всего, у нас есть интерфейс интервьюера и некоторые его реализации.', 'short_descr' => 'Он предоставляет способ делегирования логики экземпляра классам-потомкам.'],
            ['name' => 'Abstract Factory', 'name_ru' => 'Абстрактная фабрика', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Пример нашей двери из Simple Factory (Простой фабрики). В зависимости от ваших потребностей вы можете получить деревянную дверь из магазина деревянных дверей, железную дверь из магазина или дверь из соответствующего магазина. Кроме того, вам может понадобиться парень с разными видами блюд, например, плотник для деревянной двери, сварщик для железных дверей и т.д. Как видите, теперь между дверями есть зависимость, деревянные двери нуждаются в плотнике, железным дверям нужен сварщик и т.д. 
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Фабрика фабрик; Фабрика, которая объединяет отдельные, но связанные / зависимые фабрики, без указания конкретных классов.
                <br /><br />
                <b>Википедия говорит</b>
                <br />Шаблон абстрактной фабрики позволяет инкапсулировать группу отдельных фабрик, имеющих общую тему, без указания их конкретных классов.
                <br /><br />
                <b>Программный пример</b>
                <br />Перевод примера двери выше.  Прежде всего, у нас есть интерфейс нашей Door и некоторая его реализация.', 'short_descr' => 'Фабрика фабрик; Фабрика, которая объединяет отдельные, но связанные / зависимые фабрики, без указания конкретных классов.'],
            ['name' => 'Builder', 'name_ru' => 'Строитель', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Представьте, что вы в Hardee, и вы заказываете конкретную сделку, скажем, «Big Hardee», и они передают ее вам без каких-либо вопросов; Это пример простой фабрики. Но бывают ситуации, когда логика создания может включать в себя больше шагов. Например, вам нужна индивидуальная сделка в метро, ​​у вас есть несколько вариантов того, как производится ваш гамбургер, например, какой хлеб вам нужен? Какие типы соусов вы бы хотели? Какой сыр вам нужен? И т.д. В таких случаях на помощь приходит шаблон строителя.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Позволяет создавать разные типы объектов, избегая загрязнения конструктора. Полезно, когда может быть несколько разновидностей объекта. Или когда есть много шагов, связанных с созданием объекта.
                <br /><br />
                <b>Википедия говорит</b>
                <br />Образец построителя представляет собой шаблон проектирования программного обеспечения для создания объекта с намерениями найти решение для телескопического конструктора anti-pattern.
                <br /><br />
                <b>Программный пример</b>
                <br />Разумной альтернативой является использование шаблона builder. Прежде всего, у нас есть наш гамбургер, который мы хотим сделать.', 'short_descr' => 'Позволяет создавать разные типы объектов, избегая загрязнения конструктора. Полезно, когда может быть несколько разновидностей объекта. Или когда есть много шагов, связанных с созданием объекта.'],
            ['name' => 'Prototype', 'name_ru' => 'Прототип', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Помните Долли? Овцы, которые были клонированы! Давайте не будем вдаваться в подробности, но ключевым моментом здесь является то, что все дело в клонировании.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Создайте объект на основе существующего объекта путем клонирования.
                <br /><br />
                <b>Википедия говорит</b>
                <br />Образец прототипа - образец создания дизайна в разработке программного обеспечения. Он используется, когда тип создаваемых объектов определяется прототипом экземпляра, который клонируется для создания новых объектов.
                <br /><br />
                <b>Программный пример</b>
                <br />В PHP, это может быть легко сделано, clone.', 'short_descr' => 'Создайте объект на основе существующего объекта путем клонирования.'],
            ['name' => 'Singleton', 'name_ru' => 'Одиночка', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Одновременно может быть только один президент страны. Тот же президент должен быть приведен к действию, когда называет долг. Президент здесь singleton.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Обеспечивает создание только одного объекта определенного класса.
                <br /><br />
                <b>Википедия говорит</b>
                <br />В программной инженерии шаблон singleton представляет собой шаблон проектирования программного обеспечения, который ограничивает создание экземпляра класса одному объекту. Это полезно, когда требуется ровно один объект для координации действий в системе.
                <br /><br />
                <b>Программный пример</b>
                <br />Чтобы создать синглтон, сделайте конструктор закрытым, отключите клонирование, отключите расширение и создайте статическую переменную для размещения экземпляра.', 'short_descr' => 'Обеспечивает создание только одного объекта определенного класса.']
        ],
        'Structural' => [
            ['name' => 'Adapter', 'name_ru' => 'Адаптер', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Подумайте, что у вас есть несколько фотографий на вашей карте памяти и вам нужно перенести их на свой компьютер. Для их передачи вам понадобится адаптер, совместимый с вашими портами компьютера, чтобы вы могли прикрепить карту памяти к компьютеру. В этом случае кард-ридер является адаптером. Другим примером может служить известный адаптер питания; Трехштырьковая вилка не может быть подключена к розетке с двумя розетками, ей необходимо использовать адаптер питания, который делает его совместимым с двумя розетками. Еще одним примером может быть переводчик, переводящий слова, произносимые одним человеком другому.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Шаблон адаптера позволяет обернуть в адаптере другой несовместимый объект, чтобы сделать его совместимым с другим классом.
                <br /><br />
                <b>Википедия говорит</b>
                <br />В программной инженерии шаблон адаптера представляет собой шаблон проектирования программного обеспечения, который позволяет использовать интерфейс существующего класса в качестве другого интерфейса. Он часто используется для того, чтобы существующие классы работали с другими, не изменяя их исходный код.
                <br /><br />
                <b>Программный пример</b>
                <br />Рассмотрим игру, где есть охотник, и он охотится на львов.', 'short_descr' => 'Шаблон адаптера позволяет обернуть в адаптере другой несовместимый объект, чтобы сделать его совместимым с другим классом.'],
            ['name' => 'Bridge', 'name_ru' => 'Мост', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Подумайте, у вас есть сайт с разными страницами, и вы должны позволить пользователю изменить тему. Что бы вы сделали? Создавать несколько копий каждой страницы для каждой темы или просто создать отдельную тему и загрузить ее в зависимости от предпочтений пользователя? Паттерн Bridge (Мост) позволяет вам сделать второй, т.е.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Модель моста - это предпочтение композиции по наследству. Детали реализации выталкиваются из иерархии в другой объект с отдельной иерархией.
                <br /><br />
                <b>Википедия говорит</b>
                <br />Шаблон моста - это шаблон проектирования, используемый в программной инженерии, который предназначен для «отделения абстракции от ее реализации, так что эти два могут варьироваться независимо» 
                <br /><br />
                <b>Программный пример</b>
                <br />Перевод нашего примера WebPage сверху. Здесь у нас есть иерархия WebPage.', 'short_descr' => 'Модель моста - это предпочтение композиции по наследству.  Детали реализации выталкиваются из иерархии в другой объект с отдельной иерархией.'],
            ['name' => 'Composite', 'name_ru' => 'Композит', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Каждая организация состоит из сотрудников. Каждый из сотрудников имеет одинаковые функции, т.е. имеет зарплату, имеет определенные обязанности, может или не может сообщать кому-либо, может иметь или не иметь некоторых подчиненных и т.д.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Составной шаблон позволяет клиентам обрабатывать отдельные объекты единообразно.
                <br /><br />
                <b>Википедия говорит</b>
                <br />В программной инженерии составной шаблон является шаблоном проектирования секционирования. Составной шаблон описывает, что группа объектов должна обрабатываться так же, как один экземпляр объекта. Цель композитного материала - «компоновать» объекты в древовидные структуры, чтобы представлять иерархии части целого. Реализация комбинированного шаблона позволяет клиентам обрабатывать отдельные объекты и композиции единообразно.
                <br /><br />
                <b>Программный пример</b>
                <br />Пример нашего служащего сверху. Здесь у нас разные типы сотрудников.', 'short_descr' => 'Составной шаблон позволяет клиентам обрабатывать отдельные объекты единообразно.'],
            ['name' => 'Decorator', 'name_ru' => 'Декоратор', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Представьте, что вы управляете автосервисом, предлагающим множество услуг. Теперь, как вы рассчитываете счет, который будет взиматься? Вы выбираете одну услугу и динамически добавляете к ней цены на предоставляемые услуги, пока не получите окончательную стоимость. Здесь каждый тип сервиса является декоратором.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Шаблон Decorator (Декоратор) позволяет динамически изменять поведение объекта во время выполнения, обертывая его в объекте класса декоратора.
                <br /><br />
                <b>Википедия говорит</b>
                <br />В объектно-ориентированном программировании шаблон декоратора является шаблоном проектирования, который позволяет поведению добавлять к отдельному объекту, статически или динамически, не влияя на поведение других объектов того же класса. Образец декоратора часто полезен для соблюдения принципа единой ответственности, поскольку он позволяет разделить функциональность между классами с уникальными проблемами.
                <br /><br />
                <b>Программный пример</b>
                <br />Возьмем, к примеру, кофе. Прежде всего, у нас есть простой кофе, реализующий интерфейс для кофе.', 'short_descr' => 'Шаблон Decorator (Декоратор) позволяет динамически изменять поведение объекта во время выполнения, обертывая его в объекте класса декоратора.'],
            ['name' => 'Facade', 'name_ru' => 'Фасад', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Как включить компьютер?  «Ударь кнопку питания», говоришь! Это то, во что вы верите, потому что вы используете простой интерфейс, который компьютер предоставляет снаружи, внутри он должен сделать много вещей, чтобы это произошло. Этот простой интерфейс со сложной подсистемой является фасадом.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Фасадный шаблон предоставляет упрощенный интерфейс для сложной подсистемы.
                <br /><br />
                <b>Википедия говорит</b>
                <br />Фасад - это объект, который предоставляет упрощенный интерфейс для большей части кода, например библиотеки классов.
                <br /><br />
                <b>Программный пример</b>
                <br />Пример нашего компьютера сверху. Здесь у нас есть компьютерный класс.', 'short_descr' => 'Фасадный шаблон предоставляет упрощенный интерфейс для сложной подсистемы.'],
            ['name' => 'Flyweight', 'name_ru' => 'Легковес', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Вы когда-нибудь пили чай из какого-нибудь ларька? Они часто делают более одной чашки, которую вы требовали, и сохраняете остальную часть для любого другого клиента, чтобы сэкономить ресурсы, например, газ и т.д. Модель мухи это все о том, что означает разделение.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Он используется для минимизации использования памяти или вычислительных затрат путем совместного использования как можно больше с аналогичными объектами.
                <br /><br />
                <b>Википедия говорит</b>
                <br />В компьютерном программировании Flyweight (Легковес) - это шаблон проектирования программного обеспечения. Flyweight (Легковес) - это объект, который минимизирует использование памяти путем совместного использования как можно большего количества данных с другими подобными объектами; Это способ использования объектов в больших количествах, когда простое повторное представление будет использовать недопустимый объем памяти.
                <br /><br />
                <b>Программный пример</b>
                <br />Переводим наш пример создания чая. Прежде всего у нас есть виды чай и и способы его создания.', 'short_descr' => 'Он используется для минимизации использования памяти или вычислительных затрат путем совместного использования как можно больше с аналогичными объектами.'],
            ['name' => 'Proxy', 'name_ru' => 'Прокси', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Вы когда-нибудь пользовались карточкой доступа, чтобы пройти через дверь? Существует несколько вариантов открытия этой двери, т.е. ее можно открыть либо с помощью карточки доступа, либо нажатием кнопки, которая обходит безопасность. Основная функциональность двери открыта, но поверх нее добавлен прокси, чтобы добавить некоторые функции. Позвольте мне лучше объяснить это, используя пример кода ниже.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Используя прокси-шаблон, класс представляет функциональность другого класса.
                <br /><br />
                <b>Википедия говорит</b>
                <br />Прокси, в самом общем виде, является классом, функционирующим как интерфейс к чему-то еще. Прокси - это объект-оболочка или агент, вызываемый клиентом для доступа к реальному объекту-сервису за кулисами. Использование прокси-сервера может просто пересылаться на реальный объект или предоставлять дополнительную логику. В прокси могут быть предоставлены дополнительные функции, например кеширование, когда операции над реальным объектом являются ресурсоемкими, или проверка предварительных условий до вызова операций над реальным объектом.
                <br /><br />
                <b>Программный пример</b>
                <br />Пример сверху нашей двери безопасности. Во-первых, у нас есть дверной интерфейс и реализация двери.', 'short_descr' => 'Используя прокси-шаблон, класс представляет функциональность другого класса.']
        ],
        'Behavioral' => [
            ['name' => 'Chain of Responsibility', 'name_ru' => 'Цепочка зависимости', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Например, у вас есть три способа оплаты ( A, B и C) настройки в вашей учетной записи; Каждый из которых имеет разное количество. A имеет 100 USD, B имеет 300 USD и C имеющую 1000 USD, и предпочтение платежам выбирается как A затем B затем C. Вы пытаетесь купить что-то стоимостью 210 долларов США. Используя цепочку ответственности, в первую очередь будет проверяться учетная запись A, если она может совершить покупку, если да, то покупка будет сделана и цепочка будет нарушена. В противном случае запрос переместится в контрольную сумму B если цепочка yes будет нарушена, в противном случае запрос будет продолжать пересылать, пока не найдет подходящий обработчик. Здесь A, B и C являются звеньями цепи, и все явление - это цепочка ответственности.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Это помогает строить цепочку объектов. Запрос поступает с одного конца и продолжает идти от объекта к объекту, пока не найдет подходящий обработчик.
                <br /><br />
                <b>Википедия говорит</b>
                <br />В объектно-ориентированном дизайне шаблон цепочечной ответственности представляет собой шаблон проектирования, состоящий из источника объектов команд и последовательности объектов обработки. Каждый объект обработки содержит логику, которая определяет типы объектов команд, которые он может обрабатывать; Остальные передаются следующему объекту обработки в цепочке.
                <br /><br />
                <b>Программный пример</b>
                <br />Перевод нашего примера учетной записи выше. Прежде всего, у нас есть базовая учетная запись с логикой объединения целых счетов и некоторых счетов.', 'short_descr' => 'Это помогает строить цепочку объектов. Запрос поступает с одного конца и продолжает идти от объекта к объекту, пока не найдет подходящий обработчик.'],
            ['name' => 'Command', 'name_ru' => 'Команда', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Типичный пример - вы заказываете еду в ресторане. Вы (т.е. Client) просите официанта (например, Invoker) принести еду (т.е. Command), а официант просто переправляет запрос шеф-повару (т.е. Получателю), который знает, что и как готовить. Другим примером может быть то, что вы (т.е. Client) включаете (то есть Command) телевизор (т.е. Receiver) с помощью пульта дистанционного управления (Invoker).
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Позволяет инкапсулировать действия в объектах. Основная идея этого шаблона - предоставить средства для отделения клиента от получателя.
                <br /><br />
                <b>Википедия говорит</b>
                <br />В объектно-ориентированном программировании шаблон команды представляет собой шаблон поведения, в котором объект используется для инкапсуляции всей информации, необходимой для выполнения действия, или запуска события в более позднее время. Эта информация включает имя метода, объект, которому принадлежит метод, и значения параметров метода.
                <br /><br />
                <b>Программный пример</b>
                <br />Прежде всего, у нас есть приемник, который реализует каждое действие, которое может быть выполнено.', 'short_descr' => 'Позволяет инкапсулировать действия в объектах. Основная идея этого шаблона - предоставить средства для отделения клиента от получателя.'],
            ['name' => 'Iterator', 'name_ru' => 'Повторитель', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Старая радиостанция будет хорошим примером итератора, где пользователь может начать с какого-либо канала, а затем использовать следующую или предыдущую кнопки для перехода по соответствующим каналам. Или возьмите пример MP3-плеера или телевизора, где вы можете нажать следующую и предыдущие кнопки, чтобы пройти по последовательным каналам, или, другими словами, все они предоставляют интерфейс для итерации по соответствующим каналам, песням или радиостанциям.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Он представляет собой способ доступа к элементам объекта без раскрытия основного представления.
                <br /><br />
                <b>Википедия говорит</b>
                <br />В объектно-ориентированном программировании шаблон итератора является шаблоном проектирования, в котором итератор используется для перемещения контейнера и доступа к элементам контейнера. Шаблон итератора отделяет алгоритмы от контейнеров; В некоторых случаях алгоритмы обязательно зависят от контейнера и, следовательно, не могут быть развязаны.
                <br /><br />
                <b>Программный пример</b>
                <br />В PHP это довольно легко реализовать с использованием SPL (стандартной библиотеки PHP). Пример перевода наших радиостанций сверху. Прежде всего, у нас есть RadioStation.', 'short_descr' => 'Он представляет собой способ доступа к элементам объекта без раскрытия основного представления.'],
            ['name' => 'Mediator', 'name_ru' => 'Посредник', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Общий пример - когда вы разговариваете с кем-то на своем мобильном телефоне, между вами и вами есть провайдер сети, и ваш разговор проходит через него, а не напрямую. В этом случае провайдер сети является посредником.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Шаблон посредника добавляет сторонний объект (называемый посредником) для управления взаимодействием между двумя объектами (называемыми коллегами). Это помогает уменьшить связь между классами, общающимися друг с другом. Потому что теперь им не нужно знать о реализации друг друга.
                <br /><br />
                <b>Википедия говорит</b>
                <br />В программной инженерии шаблон посредника определяет объект, который инкапсулирует взаимодействие объектов. Этот шаблон считается поведенческим шаблоном из-за того, как он может изменить поведение программы.
                <br /><br />
                <b>Программный пример</b>
                <br />Вот самый простой пример чат-комнаты (т.е. медиатора) с пользователями (то есть коллегами), отправляющими сообщения друг другу.', 'short_descr' => 'Шаблон посредника добавляет сторонний объект (называемый посредником) для управления взаимодействием между двумя объектами (называемыми коллегами). Это помогает уменьшить связь между классами, общающимися друг с другом. Потому что теперь им не нужно знать о реализации друг друга.'],
            ['name' => 'Memento', 'name_ru' => 'Хранитель', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Возьмем пример калькулятора (например, оригинатор), где всякий раз, когда вы выполняете некоторый расчет, последний расчет сохраняется в памяти (т.е. memento), чтобы вы могли вернуться к нему и, возможно, восстановить его с помощью некоторых кнопок действий (т.е. сторожа).
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Паттерн Memento (Хранитель) предназначен для захвата и хранения текущего состояния объекта таким образом, чтобы его можно было впоследствии восстановить в плавном порядке.
                <br /><br />
                <b>Википедия говорит</b>
                <br />Паттерн Memento (Хранитель) - это шаблон проектирования программного обеспечения, который обеспечивает возможность восстановления объекта до его предыдущего состояния (отмена с помощью отката). Обычно полезно, когда вам нужно предоставить какую-то функциональность отмены.
                <br /><br />
                <b>Программный пример</b>
                <br />Давайте возьмем пример текстового редактора, который время от времени сохраняет состояние, и вы можете его восстановить, если хотите.', 'short_descr' => 'Паттерн Memento (Хранитель) предназначен для захвата и хранения текущего состояния объекта таким образом, чтобы его можно было впоследствии восстановить в плавном порядке.'],
            ['name' => 'Observer', 'name_ru' => 'Наблюдатель', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Хорошим примером могут служить лица, ищущие работу, где они подписываются на какой-либо сайт публикации вакансий, и они уведомляются всякий раз, когда есть подходящая возможность трудоустройства.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Определяет зависимость между объектами, так что всякий раз, когда объект изменяет свое состояние, все его члены уведомляются.
                <br /><br />
                <b>Википедия говорит</b>
                <br />Шаблон наблюдателя представляет собой шаблон проектирования программного обеспечения, в котором объект, называемый субъектом, поддерживает список своих иждивенцев, называемых наблюдателями, и автоматически уведомляет их о любых изменениях состояния, обычно путем вызова одного из их методов.
                <br /><br />
                <b>Программный пример</b>
                <br />Перевод нашего примера сверху. Прежде всего, у нас есть лица, ищущие работу, о которых необходимо уведомить для публикации вакансии.', 'short_descr' => 'Определяет зависимость между объектами, так что всякий раз, когда объект изменяет свое состояние, все его члены уведомляются.'],
            ['name' => 'Visitor', 'name_ru' => 'Посетитель', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Рассмотрите кого-то, посещающий Дубай. Им просто нужен путь (то есть, виза) для въезда в Дубай. По прибытии они могут прийти и посетить любое место в Дубае самостоятельно, без необходимости просить разрешения или выполнять какую-либо работу на ногах, чтобы посетить любое место здесь; Просто сообщите им о месте, и они могут его посетить. Шаблон посетителя позволяет вам делать именно это, это помогает вам добавлять места для посещения, чтобы они могли посещать как можно больше людей, не делая никаких беготни.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Шаблон посетителя позволяет добавлять дополнительные операции к объектам без необходимости их изменения.
                <br /><br />
                <b>Википедия говорит</b>
                <br />В объектно-ориентированном программировании и разработке программного обеспечения шаблон проектирования посетителей - это способ разделения алгоритма от структуры объекта, на котором он работает. Практическим результатом такого разделения является возможность добавления новых операций к существующим объектным структурам без изменения этих структур. Это один из способов следовать принципу «открыто / закрыто».
                <br /><br />
                <b>Программный пример</b>
                <br />Давайте возьмем пример моделирования в зоопарке, где у нас есть несколько разных видов животных, и мы должны сделать их Звуком. Давайте переведем это, используя шаблон посетителя.', 'short_descr' => 'Шаблон посетителя позволяет добавлять дополнительные операции к объектам без необходимости их изменения.'],
            ['name' => 'Strategy', 'name_ru' => 'Стратегия', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Рассмотрим пример сортировки, мы внедрили сортировку пузырей, но данные начали расти, и пузырьковая сортировка стала очень медленной. Для решения этой проблемы мы внедрили Quick sort. Но теперь, хотя быстрый алгоритм сортировки улучшался для больших наборов данных, для небольших наборов данных он был очень медленным. Для этого мы реализовали стратегию, в которой для небольших наборов данных будет использоваться сортировка пузырьков, а для более быстрой и быстрой сортировки.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Шаблон стратегии позволяет вам переключать алгоритм или стратегию, исходя из ситуации.
                <br /><br />
                <b>Википедия говорит</b>
                <br />В компьютерном программировании шаблон стратегии (также известный как шаблон политики) представляет собой шаблон проектирования программного обеспечения для поведения, который позволяет выбирать поведение алгоритма во время выполнения.
                <br /><br />
                <b>Программный пример</b>
                <br />Перевод нашего примера сверху. Прежде всего, у нас есть наш стратегический интерфейс и различные реализации стратегии.', 'short_descr' => 'Шаблон стратегии позволяет вам переключать алгоритм или стратегию, исходя из ситуации.'],
            ['name' => 'State', 'name_ru' => 'Состояние', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Представьте, что вы используете какое-то приложение для рисования, вы выбираете кисть для рисования. Теперь кисть меняет свое поведение в зависимости от выбранного цвета, т.е. если вы выбрали красный цвет, он будет рисоваться красным, если синий, то он будет синим и т.д.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Он позволяет изменять поведение класса при изменении состояния.
                <br /><br />
                <b>Википедия говорит</b>
                <br />Шаблон состояния представляет собой шаблон проектирования программного обеспечения для поведения, который реализует машину состояний объектно-ориентированным способом. С помощью шаблона состояния конечный автомат реализуется посредством реализации каждого отдельного состояния как производного класса интерфейса шаблона состояния и реализации переходов состояния посредством вызова методов, определенных суперклассом шаблона. Шаблон состояния может быть интерпретирован как шаблон стратегии, который может переключать текущую стратегию посредством вызова методов, определенных в интерфейсе шаблона.
                <br /><br />
                <b>Программный пример</b>
                <br />Давайте возьмем пример текстового редактора, он позволит вам изменить состояние текста, который набирается, т.е. если вы выделили полужирный шрифт, он начнет писать полужирным шрифтом, если курсив будет выделен курсивом и т.д.', 'short_descr' => 'Он позволяет изменять поведение класса при изменении состояния.'],
            ['name' => 'Template Method', 'name_ru' => 'Шаблонный метод', 'descr' => '
                <b>Пример из реального мира</b>
                <br />Предположим, мы строим дом. Шаги для построения могут выглядеть следующим образом:<br />Подготовьте основание дома;<br />Стройте стены;<br />Добавить крышу;<br />Добавить другие этажи;<br /><br />Порядок этих шагов никогда не может быть изменен, т.е. Вы не сможете построить крышу перед строительством стен и т.д. Но каждый из этапов может быть изменен, например стены могут быть сделаны из дерева или полиэстера или камня.
                <br /><br />
                <b>Проще говоря</b>
                <br />
                Метод шаблона определяет скелет того, как определенный алгоритм может быть выполнен, но откладывает выполнение этих шагов для дочерних классов.
                <br /><br />
                <b>Википедия говорит</b>
                <br />В программной инженерии шаблон шаблона шаблона представляет собой шаблон поведения, который определяет программный скелет алгоритма в операции, откладывая некоторые шаги до подклассов. Он позволяет переопределить определенные шаги алгоритма без изменения структуры алгоритма.
                <br /><br />
                <b>Программный пример</b>
                <br />Представьте, что у нас есть инструмент построения, который помогает нам тестировать, собирать, строить, генерировать отчеты о построении (то есть отчеты о покрытии кода, линт-отчет и т.д.) И развертывать наше приложение на тестовом сервере.', 'short_descr' => 'Метод шаблона определяет скелет того, как определенный алгоритм может быть выполнен, но откладывает выполнение этих шагов для дочерних классов.']
        ]
    ]
];
echo '<style>
    h2 { margin-left: 15px; }
    h3 { margin-bottom: 0; margin-left: 30px; margin-right: 30px; margin-top: 5px; font-weight: normal; }
    .short_descr { margin-left: 15px; padding-left: 15px; padding-bottom: 10px; color: gray; display: inline-block; }
    .descr { margin-left: 30px; border-left: 3px solid darkgray; padding-left: 15px; margin-bottom: 30px; }
    .code { margin-left: 30px; border: 1px solid darkgray; padding: 15px; margin-bottom: 15px; border-radius: 5px; }
</style>';

echo '<script>
function hw(id) {
    if (document.getElementById(id).style.display == "none") {
        document.getElementById(id).style.display = "block";
    } else {
        document.getElementById(id).style.display = "none";
    }
}
</script>';

echo '<h1>Patterns</h1>';
foreach ($patterns_info['types'] as $type => $patterns) {
    echo '<h2>' . $type . ' / ' . $patterns_info['types_names'][$type] . '</h2>';
    foreach ($patterns as $pattern) {
        echo '<h3 style="cursor: pointer;" onclick="hw(\'' . strtolower(str_replace(' ', '_', $pattern['name'])) . '\')">' . $pattern['name'] . ($pattern['name_ru'] != ''?' / ' . $pattern['name_ru']:'') . '</h3>';
        echo '<span class="short_descr">' . $pattern['short_descr'] . '</span>';
        echo '<div style="padding: 10px 25px 10px 0; background: ghostwhite; display: none;" id="' . strtolower(str_replace(' ', '_', $pattern['name'])) . '">';
            echo '<div class="descr">' . $pattern['descr'] . '</div>';
            foreach (new DirectoryIterator(__DIR__ . '/' . strtolower(str_replace(' ', '_', $pattern['name'])) . '/') as $fileInfo) {
                if ($fileInfo->isDot()) {
                    continue;
                }

                $file = new SplFileObject($fileInfo->getRealPath(), "r");
                $contents = str_replace('<?php', '', $file->fread($file->getSize()));

                echo '<div class="code"><b>' . str_replace('.php', '', $fileInfo->getFilename()) . '</b><br /><pre><code>' . $contents . '</code></pre></div>';
            }
        echo '</div>';
    }
}

//foreach (new DirectoryIterator(__DIR__) as $fileInfo) {
//    if($fileInfo->isDot() or !$fileInfo->isDir()) continue;
//    echo $fileInfo->getFilename() . "<br />";
//}